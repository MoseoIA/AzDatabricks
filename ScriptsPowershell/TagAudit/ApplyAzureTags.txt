--- ApplyAzureTags.ps1 ---

## Description
This script applies a set of tags to Azure resources, acting as the remediation part of the tag governance workflow. 

Its primary and recommended method is to consume a CSV file generated by the audit scripts (`AuditAzureTags.ps1` or `ValidateMandatoryTags.ps1`), allowing for precise and controlled tag application.

## Key Features

- **Workflow-Driven:** Designed to work seamlessly with the output of audit scripts.
- **Safe by Default:** Includes a mandatory `-WhatIf` simulation mode and requires user confirmation for real changes.
- **Flexible Tagging Actions:** Can merge new tags with existing ones, completely replace them, or only add new ones.
- **Detailed Reporting:** Generates a CSV report detailing the outcome of each operation (success, failure, or simulation), including before-and-after tag states.

## Parameters

- `-TagsToApply` (Required): A comma-separated string of tags to apply.
  - Format: `"tagKey1=tagValue1,tagKey2=tagValue2"`

- `-InputCSV` (Recommended): The path to a CSV file containing the resources to tag. The CSV **must** have a `ResourceId` column, which is standard in the reports from the audit scripts.

- `-TargetType` (Ad-hoc): For use without a CSV. Specifies the type of resources to target.
  - `ResourceGroups`: Targets all resource groups (can be filtered by `-ResourceGroupFilter`).
  - `Resources`: Targets all resources (can be filtered by `-ResourceGroupFilter`).

- `-ResourceGroupFilter` (Ad-hoc): Used with `-TargetType` to filter resources by a specific resource group name. Supports wildcards (e.g., `"prod-*"`).

- `-TagAction` (Optional): Defines how the tags are applied. Defaults to `Merge`.
  - `Merge`: Adds new tags and overwrites existing tags with the same key.
  - `Replace`: Deletes all existing tags and applies only the new ones.
  - `Add`: Adds new tags but does not overwrite any existing tags.

- `-WhatIf` (Switch): Simulates the entire operation. It will show you exactly what changes would be made without applying them. A report is still generated.

- `-LogPath` (Optional): Specify a custom full path for the final CSV report. If not provided, a default name is generated in the script's directory.

## Recommended Workflow

1.  **Audit:** Run `AuditAzureTags.ps1` or `ValidateMandatoryTags.ps1` to find non-compliant resources.
    ```powershell
    .\ValidateMandatoryTags.ps1 -MandatoryTags "CostCenter=any" -AuditType Both -ExportToCSV
    ```
2.  **Review:** Inspect the generated CSV file. You can remove rows for any resources you don't want to change.
3.  **Remediate (Simulate):** Run `ApplyAzureTags.ps1` with the `-WhatIf` switch, using the CSV as input.
    ```powershell
    .\ApplyAzureTags.ps1 -TagsToApply "CostCenter=12345" -InputCSV .\Azure_Mandatory_Tags_Validation_...csv -WhatIf
    ```
4.  **Execute:** If the simulation looks correct, run the command again without `-WhatIf` to apply the changes.
    ```powershell
    .\ApplyAzureTags.ps1 -TagsToApply "CostCenter=12345" -InputCSV .\Azure_Mandatory_Tags_Validation_...csv
    ```

## Output Format

- **Console:** A summary table showing the result of the operation for each resource.
- **CSV Report:** A detailed log file with the following columns:
  - `ResourceId`
  - `Name`
  - `ResourceType`
  - `Status` (Success, Failed, Simulated)
  - `Action` (Merge, Replace, Add)
  - `OldTags`
  - `NewTags`
  - `Message` (Includes any error messages)